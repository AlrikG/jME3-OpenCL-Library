
// Library for accessing the three types of grids: RealGrid, MACGrid, FlagGrid

#ifndef LSZ
#define LSZ(vi, sz)			((vi).x + ((vi).y + (vi).z * (sz).y) * (sz).x)
#define L_INVSZ(i, vi, sz)	(vi).z = i / ((sz).x*(sz).y); (vi).y = (i - (vi).z*(sz).x*(sz).y)/(sz).x; (vi).x = i - (sz).x*((vi).y + (vi).z*(sz).y);
#endif

typedef __global float* RealGrid_t;
typedef __global float* MACGrid_t;
typedef __global char*  FlagGrid_t;
typedef int3 GridSize_t;
typedef int3 GridIndex_t;
typedef float3 GridPosition_t;

bool Grid_isValid(GridIndex_t index, GridSize_t size)
{
	return index.x>=0 && index.y>=0 && index.z>=0 && index.x<size.x && index.y<size.y && index.z<size.z;
}

float RealGrid_get(RealGrid_t grid, GridIndex_t index, GridSize_t size)
{
	int i = LSZ(index, size);
	return grid[i];
}

void RealGrid_set(RealGrid_t grid, GridIndex_t index, GridSize_t size, float value)
{
	int i = LSZ(index, size);
	grid[i] = value;
}

float RealGrid_getInterpolated(RealGrid_t grid, GridPosition_t pos, GridSize_t size)
{
	float px=pos.x-0.5, py=pos.y-0.5, pz=pos.z-0.5;
    int xi = (int)px;
    int yi = (int)py;
    int zi = (int)pz;
    float s1 = px-(float)xi, s0 = 1.-s1;
    float t1 = py-(float)yi, t0 = 1.-t1;
    float f1 = pz-(float)zi, f0 = 1.-f1;
    /* clamp to border */
    if (px < 0.) { xi = 0; s0 = 1.0; s1 = 0.0; }
    if (py < 0.) { yi = 0; t0 = 1.0; t1 = 0.0; }
    if (pz < 0.) { zi = 0; f0 = 1.0; f1 = 0.0; }
    if (xi >= size.x-1) { xi = size.x-2; s0 = 0.0; s1 = 1.0; }
    if (yi >= size.y-1) { yi = size.y-2; t0 = 0.0; t1 = 1.0; }
    if (size.z>1) { if (zi >= size.z-1) { zi = size.z-2; f0 = 0.0; f1 = 1.0; } }
    const int X = 1;
    const int Y = size.x;
	const int Z = size.x*size.y;

	int idx = xi + Y * yi + Z * zi;
	return  ((grid[idx]    *t0 + grid[idx+Y]    *t1) * s0
           + (grid[idx+X]  *t0 + grid[idx+X+Y]  *t1) * s1) * f0
           +((grid[idx+Z]  *t0 + grid[idx+Y+Z]  *t1) * s0
           + (grid[idx+X+Z]*t0 + grid[idx+X+Y+Z]*t1) * s1) * f1;
}

float RealGrid_getInterpolatedCubic(RealGrid_t grid, GridPosition_t pos, GridSize_t size)
{
	//TODO
	return 0;
}

float RealGrid_getInterpolatedHi(RealGrid_t grid, GridPosition_t pos, GridSize_t size, int order)
{
	if (order == 1) 
		return RealGrid_getInterpolated(grid, pos, size);
	else
		return RealGrid_getInterpolatedCubic(grid, pos, size);
}

float3 MACGrid_getCentered(MACGrid_t grid, GridIndex_t index, GridSize_t size)
{
	//TODO
	return 0;
}

__global float* MACGRid_getPointerX(MACGrid_t grid, GridIndex_t index, GridSize_t size)
{
	int i = LSZ(index, (int3)(size.x+1, size.y, size.z));
	return &grid[i];
}

__global float* MACGRid_getPointerY(MACGrid_t grid, GridIndex_t index, GridSize_t size)
{
	int offset = (size.x+1) * size.y * size.z;
	int i = LSZ(index, (int3)(size.x, size.y+1, size.z));
	return &grid[i + offset];
}

__global float* MACGRid_getPointerZ(MACGrid_t grid, GridIndex_t index, GridSize_t size)
{
	int offset = (size.x+1) * size.y * size.z + size.x * (size.y+1) * size.z;
	int i = LSZ(index, (int3)(size.x, size.y, size.z+1));
	return &grid[i + offset];
}

__constant int CellType_None     = 0;
__constant int CellType_Fluid    = 1;
__constant int CellType_Obstacle = 2;
__constant int CellType_Empty    = 4;
__constant int CellType_Inflow   = 8;
__constant int CellType_Outflow  = 16;
__constant int CellType_Open     = 32;
__constant int CellType_Stick    = 128;
__constant int CellType_Reserved = 256;
		// 2^10 - 2^14 reserved for moving obstacles
__constant int CellType_ZeroPressure = (1<<15);

int FlagGrid_get(FlagGrid_t grid, GridIndex_t index, GridSize_t size)
{
	return (int) grid[LSZ(index, size)];
}

void FlagGrid_set(FlagGrid_t grid, GridIndex_t index, GridSize_t size, int flag)
{
	grid[LSZ(index, size)] = (char) flag;
}